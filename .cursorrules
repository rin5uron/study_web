# .cursorrules

## 📋 コマンドフレーズ一覧
| コマンドフレーズ | 動作内容 |
|----------------|----------|
| 「〇〇分の学習を開始します」 | 指定時間に合わせた学習計画を提案 |
| 「学習を開始します、（日時の記載）」 | タイムログにのみ時間と「0h00m」の合計時間を記録する。ワークログには記録しない |
| 「学習を終了します」 | 直前の「学習を開始します」で記録した時間との差分を計算し、タイムログに開始時間、終了時間、合計時間、および内容を記録する |
| 「今日はおしまい」 | その日の学習のまとめを記載 |
| 「ログをつけて」「ログを追加して」 | work_log.mdとtime_log.mdに学習記録を追記 |
| 「ルールに追加して」 | .cursorrulesにルールを追記 |
| 「辞書に追加して」 | tech_glossary.mdに新しい用語や知識を追記 |
| 「メモに追加して」 | memo_study.mdに学習メモを追記 |
| 「IT辞書に追加して」 | ITword.mdに新しい用語や知識を追記 |
| 「ITメモに追加して」 | ITmemo.mdに新しい用語や知識を追記 |
| 「師匠メモに追加して」 | mentor_notes.mdに学びや気づきを記録 |
| 「確認メモに追加して」 | memo_followup.mdに「メンターへ確認してもらうこと」として記録 |
| 「調査メモに追加して」 | memo_followup.mdに「自分で調べること」として記録 |
| 「復習問題を出して」 | 復習問題を出す |


## 🚀 GitHubへの更新方針
- **重要**: GitHubへのコミットと更新（プッシュ）は明示的な指示がある場合のみ行います
- **重要**: 変更をステージングエリア（git add）に追加することも明示的な指示がある場合のみ行います
- 通常の作業はローカル環境でのみ行い、コミットまでを完了させておきます
- GitHubへの反映が必要な場合は「GitHubに反映して」と明示的に依頼します
- 学習効果を高めるため、GitHub操作は基本的に手動で行い、バージョン管理の理解を深めます
- コミットする際は、ファイル種類に応じた統一されたコミットメッセージを使用します（下記「💾 コミットメッセージ一覧」参照）
- コミットメッセージに指定がある場合は指定されたメッセージを優先する
- 変更内容ごとに適切にコミットを分け、一度に大量の変更をコミットしないようにします

## 💾 コミットメッセージ一覧
| ファイル種類 | コミットメッセージ |
|------------|------------------|
| time_log.md, work_log.md | 「ログの追加」 |
| mentor_notes.md | 師匠の教え振返り|
| .cursorrules | 「ルールを追加」 |

## 📝 ログの定義と追加方法
- ログとは'work/time_log.md'と'work/work_log.md'のこと
- time_log.mdはタイムログ
- work_log.mdはワークログ
- 「ログをつけて」「ログを追加して」のコマンドでwork_log.mdとtime_log.mdに学習記録を追記する
- 「学んだ単語」のコマンドでtech_glossary.mdに新しい用語や知識を追記し、ワークログにも同形式で追加する
- ログに追加する際は、新しいファイルは作成せず、既存のファイルに追加する

## 📝 ログの記載方法
- **超重要**: 新しい記録は必ず最上部にに更新し、古い記録は下部に移動する
- **超重要**: 同じ日の記録が複数ある場合の時系列順序：
  1. まず新しい記録を最上部に追加
  2. 時系列が不適切な場合は、その旨を報告
  3. 正しい時系列順序の提案を提示
  4. ユーザーの承認を得てから順序の変更を実施

## 🤖 AIアシスタントの記録手順
1. 新規記録の追加：
   - 必ず最上部に追加
   - 既存の記録は変更しない

2. 時系列チェック：
   - 同じ日の記録の時系列を確認
   - 不適切な順序を発見した場合：
     1. 問題のある箇所を指摘
     2. 正しい順序案を提示
     3. 「順序を修正してもよろしいですか？」と確認
     4. 承認後のみ修正を実施

3. 禁止事項：
   - ユーザーの承認なしでの記録の移動・編集
   - 日付の異なる記録の順序変更
   - 記録内容の勝手な修正


## 📝 辞書の記載方法
- 辞書とは'tech_glossary.md'のこと
- IT辞書とは'ITword.md'のこと
-「辞書に追加して」のコマンドで@tech_glossary.md にも記載する
- 「IT辞書に追加して」のコマンドでITword.mdに追記する、同時に辞書ファイル@tech_glossary.md にも記載する
-「辞書に追加して」のコマンド時はITword.mdには追記しない



### 週間サマリーの管理
- **重要**: 週間サマリーは土曜日始まり金曜日終わりとする（例：4/13-4/19 → 4/19-4/25）
- **重要**: 週間サマリーは毎週土曜日に更新する
- **重要**: 週間サマリーのタイトルは【YYYY/MM/DD-MM/DD】の形式で記載
- **重要**: 週間サマリーの期間表記例
  - 今週：【2025/04/19-04/25】
  - 先週：【2025/04/12-04/18】
  - 前々週：【2025/04/05-04/11】
- **重要**: 新しい週が始まったら、前の週の週間所感を必ず記入する
- **重要**: 週間サマリーの更新時には以下を確認
  1. 期間が正しく土曜始まりになっているか
  2. 前週の週間所感が記入されているか
  3. 学習時間の計算が正しいか
  4. 日付と曜日の対応が正しいか

### その他の記録ルール
- **重要**: すべての記録ファイル（work_log.md, time_log.md, mentor_notes.md）は、最新の記録を必ず上部に追加し、古い記録は下部に移動する
- **重要**: 記録の並び順は、日付が新しい順（降順）とし、同じ日付内では時間が遅い順（夜→朝）に並べる
- **重要**: タイムログの記録形式は「開始時間-終了時間 (合計時間) 作業内容」の形式で統一する
- **重要**: タイムログの時間は24時間表記（例：22:00-23:00）を使用する
- **重要**: タイムログの合計時間は括弧付きで記載（例：(1h30m)）する
- **重要**: タイムログは「日次記録」セクションにテーブル形式で記録し、テーブルヘッダー（列名）は最上部のみに記載する
- **重要**: タイムログのテーブル形式は「日付｜開始時間｜終了時間｜合計時間｜主な作業内容」の5列で構成する
- **重要**: 新しいタイムログの記録を追加する際は、既存の表形式を崩さないように注意する
- **重要**: 新しいタイムログの記録を追加する際、週間サマリーにも対応する日付の学習時間と内容を自動的に更新する
- **重要**: タイムログが更新されたら、その日の合計時間、週間合計時間、月間合計時間を再計算し、サマリーを更新する
- **重要**: READMEの学習状況は毎週土曜日に更新する
- **重要**: READMEの更新には、現在の学習フェーズ、次のステップ、直近の学習実績（週間サマリー）を含める
- 記録の日付は【**YYYY/MM/DD**】の形式で統一する
- タイムログとワークログには、指定がない限り基本的に学習の最後に記録する
- 学習の最後になるまでは最初の学習開始時間のみ記録する
- **重要**: 学習開始時は合計時間を「0h00m」と明示的に記録する
- **重要**: 「学習を開始します」コマンドではタイムログにのみ記録し、ワークログには記録しない
- **重要**: 「学習を終了します」コマンドを使用すると、直前の「学習を開始します」で記録した時間から現在までの合計時間を自動的に計算して記録する
- **重要**: 「学習を終了します」コマンドの後に内容を書くと、その内容がタイムログの「主な作業内容」欄に記録される
- **重要**: ワークログは実際に行った作業内容のみを記録し、予定や計画は記録しない
- **重要**: ワークログも必ず最新の記録が上部にくるように日付順に記録する
- **重要**: 既存のワークログエントリは変更せず、「メモ 📌」セクションのみに追記する（完了したこと、学んだこと、次回やることなどの主要セクションは変更しない）
- **重要**: 未完了の作業内容は記録しない。実際に完了した内容のみを記録する
- 終了時間が空欄の場合は必ず合計時間も明記する
- 日付が新しい順に記録を並べ、同じ日付内では時間が遅い順（夜→朝）に並べる
- 「今日はおしまい」のフレーズでその日のまとめを記載する
- 現在は2025年として日付を記録する
- ログの日付は前日の日付に基づいて算出する、基本毎日ログをつけることを前提にしている
- **重要**: 週間サマリーは土曜日が週の変わり目のため、新しい土曜日の日付が来たら必ず新しい週のセクションを作成する
- **重要**: 週間サマリーの更新時には日付をチェックし、前回の週と今回の週が異なるなら新しい週のセクションを追加する
- **重要**: 週間サマリーのタイトルは明確に区別できるよう【YYYY/MM/DD-MM/DD】の形式で記載する
- **重要**: タイムログに新しい日付の記録を追加する際、その日付が週間サマリーにまだ記載されていない場合は、自動的に週間サマリーにその日の学習時間と内容を追加する
- **重要**: 週間所感は週末（土曜日）に記載し、完了した週には必ず週間所感を入力する
- **重要**: 新しい週のセクションを作成した際は、前の週の週間所感が書かれていることを確認し、書かれていなければ簡潔な週間所感を追記する
- **重要**: 週の呼称は「今週」「先週」「前々週」の順に変更し、新しい週が始まるたびに呼称を更新する
- 月間サマリーは週間サマリーの更新と同時に更新する
- 月間サマリーは月の最後にも更新する
- 月間学習所感はその月の最後に記載する
- 月間サマリーでは最新の月を上部に配置し、週ごとの簡潔な学習内容をまとめる
- **重要**: 月間目標勉強時間は80時間とする



## 📌 記録ファイルの役割
- work_log.md: 作業内容の詳細記録
- time_log.md: 作業時間の詳細記録
- mentor_notes.md: メンターからの学びの記録
- tech_glossary.md: 技術用語・ショートカット辞典
- ITword.md: ITパスポート用語辞典
- ITmemo.md: ITパスポート勉強用ノート

## 🔄 記録更新の流れ
1. 新しい記録を最上部に追加
2. 既存の記録は下部に移動
3. 日付の形式を統一
4. 記録の種類に応じた適切なファイルに記録 
5. 週間・月間サマリーを必要に応じて更新
6. 月間サマリーは月の最後に更新しい月のセクションを追加する




## 💬 コミュニケーションルール
- プログラミング初心者にわかりやすい言葉や用語を心がける
- チャットは常にClaude 3.7 Sonnetのthinkingモードにする
- 複雑な作業や一連の流れが必要な場合はAgentモードを活用する
- 新しい知識を学ぶときは、ゆっくり一歩ずつ丁寧に私の理解を確認しながら進めてください
- ファイルを追加、ファイル名やファイルの役割等の更新をした際にはREADME.mdも更新する
- ログをつけるときに足りない情報がある場合は知らせる
- ユーザーが打った文字で綴り等を間違えていたら訂正して、訂正時は説明に（）内に正しい文字を表示して訂正したことがわかるようにする
- ユーザーが打った文字の意図を尊重しつつ、体裁を整える程度の修正はする。どの程度までの修正が適切かは随時ユーザーからのフィードバックを受けて学習し、ルールを更新する
- 新しいコマンドフレーズをルールに追加する際は、必ず「📋 コマンドフレーズ一覧」の表にも追記する
- コマンドフレーズが使用された場合は、「📋 コマンドフレーズ一覧」表の対応する動作を実行する
- **重要**: 新しいコマンドフレーズは必ずユーザーと相談の上で決定し、ユーザーの明示的な承認なしに勝手に追加しない
- memo_followup.mdファイルでは最新の記録を常に上部に配置する
- memo_followup.mdへの記録時には必ず記載日付を入れる（YYYY/MM/DD形式）
- memo_followup.mdにはユーザーが指定した内容以外は勝手に記載しない
- memo_followup.mdの記録は表形式（日付、内容、状態）で管理し、新しい項目を追加する際は表の先頭に挿入する
- memo_followup.mdの「状態」列は初期値を「未」とし、確認済みになったら「済」に更新する
- 学習提案はワークログの次回やることを中心に提案する
- 学習提案はロードマップとweb-basicsに基づいて一貫性のある提案をする
- 教材はweb-basicsファイル内を指す
- JavaScriptの機能別教材（アコーディオン機能など）はweb-basics/JavaScriptフォルダ内に保存する
- ファイル名作成の際は、Web業界内で一般的で分かりやすいファイル名をつける
- ファイルの名前をつけるときは日本語のローマ字表記は用いない
- HTMLファイルとCSSファイルは一般的な名前（index.html, style.css）を使用し、区別はフォルダ名で行う
- タイムログの週間サマリーが更新されたら、READMEの直近の学習実績も自動的に最新の週間サマリーに更新する
- READMEの「次のステップ」セクションは現在の学習フェーズの直後に配置し、1-2行で今後1週間の学習計画を端的に記載する
- 技術的な内容（CSSのパディング指定など）を記録する際は、以下のような簡潔な箇条書き形式を使用する：
  ```
  CSSパディング指定の5通り：
    - 個別: `padding-top/right/bottom/left`
    - 4値: `padding: 上 右 下 左`（時計回り）
    - 3値: `padding: 上 右左 下`
    - 2値: `padding: 上下 右左`
    - 1値: `padding: 全方向`
  ```
- 技術解説は一目見て後から理解できるよう、冗長な説明を避け、本質的な情報のみを端的に記載する
- tech_glossary.mdに新しい用語を追加した際は、その日のワークログにも「今日学んだ用語 📖」というセクションを追加し、同じ用語を簡潔に記録する

## 🎨 復習問題のルール
-「復習問題を出して」のコマンドで復習問題を作成する
 - 特に問題数の指定がない場合は５問作成する
 - 特に内容の指定がない場合は@tech_glossary.md から作成する
 - ４択問題、単語で答えられる問題のいずれかを作成する
 - 解答は表示しない
 - 私がチャットに解答を打ち込んだら、正答を判断し、解説も表示する
 
## 🎨 作品制作のルール
- 作品にコピーライト表示をつける場合は、基本的にGitHubアカウント名（rin5uron）を使用する
- コピーライト表示の形式は `© 2025 rin5uron` または `© 2025 rin5uron All Rights Reserved.` とする
- コピーライト表示はWebページのフッター部分に配置する
- 実習課題では、プロフェッショナルな実務を想定してコピーライト表示を付ける習慣を身につける

### 1日の複数記録のルール
- **重要**: 同じ日に複数の学習記録がある場合は、以下のルールに従って記録する
  1. 日付は【**YYYY/MM/DD**】の形式で統一する
  2. 各記録のタイトルには学習時間も含める（例：【**2025/04/20**】(09:30-10:30) DOM操作の学習）
  3. 時系列は新しい順（降順）に並べる
  4. 同じ日の記録は、時間が早い順（朝→夜）に並べる
  5. 各記録は以下のセクションを含める：
     - 完了したこと ✅
     - 学んだこと 📚（該当する場合）
     - 次回やること 📝（該当する場合）
     - メモ 📌
  6. 記録と記録の間は空行を入れて視認性を確保する
  7. 学習内容が異なる場合は、別々の記録として残す
  8. 関連する学習内容は、可能な限り1つの記録にまとめる